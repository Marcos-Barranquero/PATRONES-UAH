package GUI;

import ClasesBase.Administrador;
import ClasesBase.Libro;
import ClasesBase.Usuario;
import Iterator.ColeccionLibros;
import Iterator.IteradorLibros;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 *
 * Interfaz de usuario para administradores en la gestión de la devolución
 * de un libro
 * 
 * @author marco
 */
public class DevolverLibrosAdmin extends javax.swing.JFrame {

    Fachada fachada = Fachada.getInstancia();
    private ColeccionLibros libros = null;
    private Usuario usuario = null;
    Administrador admin;

    /**
     * Creates new form DevolverLibrosAdmin
     * @param admin
     */
    public DevolverLibrosAdmin(Administrador admin) {
        this.admin = admin;
        initComponents();
        this.lError.setVisible(false);
    }

    /**
     * Si el DNI es correcto, carga los libros del usuario en la interfaz
     * gráfica
     * @param dni -> DNI del usuario para el que se quieren cargar los libros
     */
    private void cargarLibrosUsuario(String dni) {
        // Primero compruebo errores...
        boolean correcto = true;

        if (!dniCorrecto(dni)) {
            mostrarDialogError("Introduce un DNI correcto. ");
            correcto = false;
        }

        if (correcto && fachada.recuperarUsuario(dni) == null) {
            correcto = false;
            mostrarDialogError("No existe ningún usuario con ese DNI en la BBDD. ¿Seguro que está registrado?");
        }

        if (correcto) {
            System.out.println("Cargo libros del usuario...");
            this.libros = fachada.consultarLibrosPrestados(dni);
            System.out.println(libros.toString());
            this.usuario = (Usuario) fachada.recuperarUsuario(dni);
            System.out.println(usuario.toString());
            comprobarLibrosUsuario();
        }

    }
    
    /**
     * Método que gestiona de forma dinámica los libros que tiene un usuario
     * por devolver.
     * Si no tiene ninguno, se eliminan de la interfaz aquellos elementos 
     * relacionados con la devolución de libros.
     * Si tiene libros por devolver, se cargan esos libros en el ComboBox
     */
    private void comprobarLibrosUsuario() {
        this.cbMisLibros.removeAllItems();
        if (this.libros.estaVacio()) {
            this.cbMisLibros.setVisible(false);
            this.bDevolver.setVisible(false);
            this.lEscoger.setVisible(false);
            this.lError.setVisible(true);
        } else {
            this.lError.setVisible(false);

            IteradorLibros it = libros.getIterador();

            while (it.siguiente()) {
                this.cbMisLibros.addItem(it.getElemento().getNombre());
            }
        }
    }

    /**
     * Comprobación de si el DNI que ha insertado el usuario está en un formato
     * adecuado.
     *
     * @param dni -> DNI a comprobar
     * @return -> true si es válido, false si no lo es
     */
    public boolean dniCorrecto(String dni) {
        boolean correcto = false;

        Pattern pattern = Pattern.compile("(\\d{1,8})([TRWAGMYFPDXBNJZSQVHLCKEtrwagmyfpdxbnjzsqvhlcke])");

        Matcher matcher = pattern.matcher(dni);

        if (matcher.matches()) {
            String letra = matcher.group(2);
            String letras = "TRWAGMYFPDXBNJZSQVHLCKE";

            int index = Integer.parseInt(matcher.group(1));
            index = index % 23;
            String reference = letras.substring(index, index + 1);

            if (reference.equalsIgnoreCase(letra)) {
                correcto = true;
            } else {
                correcto = false;
            }

        } else {
            correcto = false;
        }

        return correcto;
    }

    /**
     * Método auxiliar para mostrar JOptionPane con mensajes de error
     *
     * @param texto -> texto que queremos que saque el JOptionPane
     */
    public void mostrarDialogError(String texto) {
        String mensajeError = "El registro no es válido.\n" + texto;
        JOptionPane.showMessageDialog(
                this,
                mensajeError,
                "Error en el registro",
                JOptionPane.ERROR_MESSAGE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bDevolver = new javax.swing.JButton();
        bAtras = new javax.swing.JButton();
        lError = new javax.swing.JLabel();
        cbMisLibros = new javax.swing.JComboBox<>();
        lEscoger = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        tfDni = new javax.swing.JTextField();
        cargarLibros = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Biblioteca - Devolución de libros");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        bDevolver.setText("Devolver");
        bDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDevolverActionPerformed(evt);
            }
        });

        bAtras.setText("Atrás");
        bAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAtrasActionPerformed(evt);
            }
        });

        lError.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lError.setText("No tiene libros prestados");

        lEscoger.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lEscoger.setText("Escoja el libro que desea devolver");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Devolución de Libros");

        jLabel1.setText("DNI del usuario: ");

        cargarLibros.setText("Cargar libros");
        cargarLibros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarLibrosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lError, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(cbMisLibros, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lEscoger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cargarLibros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(6, 6, 6)
                                    .addComponent(tfDni, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(bDevolver, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(bAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel2)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel1))
                    .addComponent(tfDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(cargarLibros)
                .addGap(13, 13, 13)
                .addComponent(lEscoger)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbMisLibros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(lError)
                .addGap(1, 1, 1)
                .addComponent(bDevolver)
                .addGap(18, 18, 18)
                .addComponent(bAtras)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que gestiona el evento de pulsar el botón de devolver.
     * Recupera el valor seleccionado en el ComboBox e intenta devolver ese 
     * libro a través de la fachada. Comprueba también si esa devolución da lugar
     * a castigo y, si es así, se lo notifica al usuario.
     * 
     * @param evt -> Evento de pulsación del botón.
     */
    private void bDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDevolverActionPerformed
        if(cbMisLibros.getItemCount() == 0) {
            JOptionPane.showMessageDialog(this,
                    "Error al consultar libros, tienes que escoger un libro del menú de arriba.",
                    "Error al consultar libros",
                    JOptionPane.WARNING_MESSAGE);
            
            return;
        }
        
        Libro libroDevuelto = libros.getLibro(cbMisLibros.getSelectedIndex());
        int castigo = this.fachada.devolverLibro(libroDevuelto.getIdLibro(), this.usuario.getDni());

        if (castigo > 0) {
            JOptionPane.showMessageDialog(this,
                    "El libro \"" + libroDevuelto.getNombre() + "\" se ha devuelto correctamente.\nComo el usuario ha devuelto fuera de plazo, se le ha castigado " + castigo + " días.",
                    "Devolución Correcta",
                    JOptionPane.WARNING_MESSAGE);

            // Recargamos el usuario desde la base de datos para actualizar su castigo
            this.usuario = (Usuario) fachada.recuperarUsuario(this.usuario.getDni());
        } else {
            JOptionPane.showMessageDialog(this,
                    "El libro \"" + libroDevuelto.getNombre() + "\" se ha devuelto correctamente.",
                    "Devolución Correcta",
                    JOptionPane.INFORMATION_MESSAGE);
        }

        libros.eliminarLibro(libroDevuelto);
        comprobarLibrosUsuario();
    }//GEN-LAST:event_bDevolverActionPerformed

    /**
     * Botón de atrás, crea un nuevo panel de admin y se deshace de esta ventana
     *
     * @param evt -> evento de pulsar botón
     */
    private void bAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAtrasActionPerformed
        new PanelAdmin(admin).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_bAtrasActionPerformed

    /**
     * Evento de cierre de ventana, notifica al log del cierre de sesión del
     * usuario
     *
     * @param evt -> evento del cierre de ventana
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        fachada.logInfoExterna("Cierre de sesión de administrador con DNI " + this.admin.getDni());
    }//GEN-LAST:event_formWindowClosing

    /**
     * Botón de cargar libros, llama al método encargado de cargar los libros
     * en la ComboBox a partir del DNI del usuario que recoge del TextField
     *
     * @param evt -> evento de pulsar botón
     */
    private void cargarLibrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarLibrosActionPerformed
        String dni = tfDni.getText();
        cargarLibrosUsuario(dni);
    }//GEN-LAST:event_cargarLibrosActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAtras;
    private javax.swing.JButton bDevolver;
    private javax.swing.JButton cargarLibros;
    private javax.swing.JComboBox<String> cbMisLibros;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lError;
    private javax.swing.JLabel lEscoger;
    private javax.swing.JTextField tfDni;
    // End of variables declaration//GEN-END:variables
}
