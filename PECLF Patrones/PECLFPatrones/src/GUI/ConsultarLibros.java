package GUI;

import ClasesBase.Libro;
import ClasesBase.Usuario;
import Iterator.ColeccionLibros;
import Iterator.IteradorLibros;
import javax.swing.JLabel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Edu
 */
public class ConsultarLibros extends javax.swing.JFrame {

    private final Usuario usuario;
    private final Fachada fachada = Fachada.getInstancia();
    private final ColeccionLibros libros = fachada.recuperarLibros();
    private final TableRowSorter<TableModel> buscador;

    // última columna ordenada, para ordenaciones inversas
    private int ultimaColumnaOrdenada = -1;

    /**
     * Creates new form ConsultarLibros
     *
     * @param usuario
     */
    public ConsultarLibros(Usuario usuario) {
        this.usuario = usuario;
        initComponents();
        this.buscador = new TableRowSorter<>(this.tbLibros.getModel());
        this.tbLibros.setRowSorter(buscador);
        inicializarOrdenadorTabla();
        pintarTabla();
    }

    /**
     * Método que enlaza el evento de hacer click en la cabecera de la tabla con
     * el método encargado de realizar la acción que desencadena el click a la
     * cabecera.
     */
    private void inicializarOrdenadorTabla() {
        ((DefaultTableCellRenderer) this.tbLibros.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
        this.tbLibros.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbLibrosHeaderMouseClicked(evt);
            }
        });

        this.buscador.setSortable(0, false);
        this.buscador.setSortable(1, false);
        this.buscador.setSortable(2, false);
        this.buscador.setSortable(3, false);
        this.buscador.setSortable(4, false);
        this.buscador.setSortable(5, false);
    }

    /**
     * Método encargado de rellenar la jTable con los datos recuperados de la
     * base de datos. Hace uso del iterador propio.
     */
    private void pintarTabla() {
        IteradorLibros it = libros.getIterador();
        int i = 0;

        Libro libro;
        while (it.siguiente()) {
            libro = it.getElemento();
            this.tbLibros.setValueAt(libro.getIdLibro(), i, 0);
            this.tbLibros.setValueAt(libro.getNombre(), i, 1);
            this.tbLibros.setValueAt(libro.getIsbn(), i, 2);
            this.tbLibros.setValueAt(libro.getAutor(), i, 3);
            this.tbLibros.setValueAt(libro.getEdicion(), i, 4);
            this.tbLibros.setValueAt(libro.estaPrestado() ? "Prestado" : "Disponible", i, 5);
            i++;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbLibros = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        bAtras = new javax.swing.JButton();
        tfBusqueda = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        bBuscar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Biblioteca - Consulta de libros");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tbLibros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Título", "ISBN", "Autor", "Edición", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbLibros.getTableHeader().setResizingAllowed(false);
        tbLibros.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tbLibros);
        if (tbLibros.getColumnModel().getColumnCount() > 0) {
            tbLibros.getColumnModel().getColumn(0).setPreferredWidth(20);
            tbLibros.getColumnModel().getColumn(4).setPreferredWidth(20);
            tbLibros.getColumnModel().getColumn(5).setPreferredWidth(30);
        }

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText(" Libros en la biblioteca");

        bAtras.setText("Atrás");
        bAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAtrasActionPerformed(evt);
            }
        });

        jLabel2.setText("Introduzca el título / ISBN / autor  del libro que busca");

        bBuscar.setText("Buscar");
        bBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Consultar libros en biblioteca");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(bAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                        .addGap(358, 358, 358))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfBusqueda)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(bBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(91, 91, 91))
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bBuscar))
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(bAtras)
                .addGap(25, 25, 25))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento lanzado cuando el usuario hace click en la cabecera de la tabla Al
     * hacerse click, se comprueba que no hay ningún filtro y, si no lo hay, se
     * llama al método de ordenación pasándo como parámetro el número que
     * identifica la columna por la que ordenar.
     *
     * A parte, se guarda cual ha sido la última columna pulsada para que, en el
     * caso de que una columna se pulse por segunda vez consecutiva, se ordene
     * haciendo el reverso.
     *
     * @param evt -> evento de pulsar la cabecera de la tabla
     */
    private void tbLibrosHeaderMouseClicked(java.awt.event.MouseEvent evt) {
        if (this.buscador.getRowFilter() == null) {
            switch (this.tbLibros.columnAtPoint(evt.getPoint())) {
                case 0:
                    if (this.ultimaColumnaOrdenada == 0) {
                        fachada.ordenarLibrosReverso(libros, 0);
                        this.ultimaColumnaOrdenada = -1;
                    } else {
                        fachada.ordenarLibros(libros, 0);
                        this.ultimaColumnaOrdenada = 0;
                    }
                    break;
                case 1:
                    if (this.ultimaColumnaOrdenada == 1) {
                        fachada.ordenarLibrosReverso(libros, 1);
                        this.ultimaColumnaOrdenada = -1;
                    } else {
                        fachada.ordenarLibros(libros, 1);
                        this.ultimaColumnaOrdenada = 1;
                    }
                    break;
                case 2:
                    if (this.ultimaColumnaOrdenada == 2) {
                        fachada.ordenarLibrosReverso(libros, 2);
                        this.ultimaColumnaOrdenada = -1;
                    } else {
                        fachada.ordenarLibros(libros, 2);
                        this.ultimaColumnaOrdenada = 2;
                    }
                    break;

                case 3:
                    if (this.ultimaColumnaOrdenada == 3) {
                        fachada.ordenarLibrosReverso(libros, 3);
                        this.ultimaColumnaOrdenada = -1;
                    } else {
                        fachada.ordenarLibros(libros, 3);
                        this.ultimaColumnaOrdenada = 3;
                    }
                    break;
                case 4:
                    if (this.ultimaColumnaOrdenada == 4) {
                        fachada.ordenarLibrosReverso(libros, 4);
                        this.ultimaColumnaOrdenada = -1;
                    } else {
                        fachada.ordenarLibros(libros, 4);
                        this.ultimaColumnaOrdenada = 4;
                    }
                    break;
                case 5:
                    if (this.ultimaColumnaOrdenada == 5) {
                        fachada.ordenarLibrosReverso(libros, 5);
                        this.ultimaColumnaOrdenada = -1;
                    } else {
                        fachada.ordenarLibros(libros, 5);
                        this.ultimaColumnaOrdenada = 5;
                    }
                    break;
            }

            pintarTabla();
        }
    }

    /**
     * Botón de atrás, crea un nuevo panel de admin y se deshace de esta ventana
     *
     * @param evt -> evento de pulsar botón
     */
    private void bAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAtrasActionPerformed
        new PanelUsuario(this.usuario).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_bAtrasActionPerformed

    /**
     * Botón de busqueda. Al ser pulsado recupera el texto del TextField y, si
     * no está vacío, usa un filtro para mostrar en la tabla los valores que
     * encajen con el parámetro definido por el usuario
     *
     * @param evt -> evento de pulsación del botón
     */
    private void bBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarActionPerformed
        String input = this.tfBusqueda.getText();

        if (input.trim().length() == 0) {
            this.buscador.setRowFilter(null);
        } else {
            this.buscador.setRowFilter(RowFilter.regexFilter("(?i)" + input));
        }
    }//GEN-LAST:event_bBuscarActionPerformed

    /**
     * Evento de cierre de ventana, notifica al log del cierre de sesión del
     * usuario
     *
     * @param evt -> evento del cierre de ventana
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        fachada.logInfoExterna("Cierre de sesión de usuario con DNI " + this.usuario.getDni());
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAtras;
    private javax.swing.JButton bBuscar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbLibros;
    private javax.swing.JTextField tfBusqueda;
    // End of variables declaration//GEN-END:variables
}
