package GUI;

import ClasesBase.Administrador;
import ClasesBase.Portatil;
import java.time.LocalTime;
import javax.swing.JOptionPane;

/**
 *
 * Interfaz de usuario para administradores que permite la devolución
 * de un portátil
 * 
 * @author marco
 */
public class DevolverPortatil extends javax.swing.JFrame {

    Fachada fachada = Fachada.getInstancia();
    Administrador admin;

    /**
     * Creates new form DevolverPortatil
     * @param admin
     */
    public DevolverPortatil(Administrador admin) {
        this.admin = admin;
        initComponents();
    }

    /**
     * Método que gestiona la devolución de un portátil
     * Comprueba que el input es correcto y que el portátil existe, 
     * a parte de que la devolución se realiza en horario de apertura.
     * Si todas las comprobaciones están bien, se comprueba si el usuario debe
     * recibir un castigo y se le notifica si es así.
     * @param idPortatil -> ID del portatil a devolver
     */
    public void devolver(String idPortatil) {
        int idPortatilInt = -1;
        boolean correcto = true;
        Portatil portatil = null;
        String dni = null;
        
        if (!(LocalTime.now().isAfter(LocalTime.of(8, 0))
                && LocalTime.now().isBefore(LocalTime.of(20, 30)))) {
            correcto = false;
            mostrarDialogError("No se pueden prestar portátiles más tarde de las 20:30 o antes de las 8:00. ");
        }

        try {
            idPortatilInt = Integer.valueOf(idPortatil);
            if (idPortatilInt < 1) {
                correcto = false;
                mostrarDialogError("Escribe un ID adecuado (mayor que 0). ");
            }

        } catch (Exception e) {
            correcto = false;
            mostrarDialogError("Escribe una ID numérica.");
        }

        if (correcto) {
            portatil = fachada.recuperarPortatil(idPortatilInt);
        }

        if (correcto && portatil == null) {
            correcto = false;
            mostrarDialogError("No hay ningún portátil con esa ID.");
        }

        if (correcto && !portatil.isPrestado()) {
            correcto = false;
            mostrarDialogError("Ese portátil no está prestado.");

        }
        if(correcto && fachada.recuperarDniDePortatilPrestadoConId(idPortatilInt) == null)
        {
            correcto = false;
            mostrarDialogError("El portátil no está prestado.");
        }
        dni = fachada.recuperarDniDePortatilPrestadoConId(idPortatilInt);

        if (correcto) {
            int diasCastigado = fachada.devolverPortatil(dni);
            if(diasCastigado > 0)
            {
                        JOptionPane.showMessageDialog(
                this,
                "El usuario ha sido castigado " + diasCastigado + " por entregar el portátil tarde. ",
                "Error en préstamo de portátil.",
                JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
    
    /**
     * Método auxiliar para mostrar JOptionPane con mensajes de error
     *
     * @param texto -> texto que queremos que saque el JOptionPane
     */
    public void mostrarDialogError(String texto) {
        String mensajeError = "Error: \n" + texto;
        JOptionPane.showMessageDialog(
                this,
                mensajeError,
                "Error en préstamo de portátil.",
                JOptionPane.ERROR_MESSAGE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lAlta = new javax.swing.JLabel();
        lUsuario2 = new javax.swing.JLabel();
        tfIdPortatil = new javax.swing.JTextField();
        bDevolver = new javax.swing.JButton();
        bAtras = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Biblioteca - Devolución de portátil");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lAlta.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lAlta.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lAlta.setText("Biblioteca - Devolución portátil");

        lUsuario2.setText("ID Portátil: ");

        bDevolver.setText("Devolver");
        bDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDevolverActionPerformed(evt);
            }
        });

        bAtras.setText("Atrás");
        bAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAtrasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(bAtras)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(lAlta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(141, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bDevolver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lUsuario2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(tfIdPortatil, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(140, 140, 140))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(lAlta, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lUsuario2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfIdPortatil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bDevolver, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bAtras)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que gestiona la pulsación del botón de devolver, recupera el texto
     * del TextField y llama al método de devolución
     * @param evt 
     */
    private void bDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDevolverActionPerformed
        String idPortatil = tfIdPortatil.getText();
        devolver(idPortatil);
    }//GEN-LAST:event_bDevolverActionPerformed

    /**
     * Botón de atrás, crea un nuevo panel de admin y se deshace de esta ventana
     *
     * @param evt -> evento de pulsar botón
     */
    private void bAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAtrasActionPerformed
        new PanelAdmin(admin).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_bAtrasActionPerformed

    /**
     * Evento de cierre de ventana, notifica al log del cierre de sesión del
     * usuario
     *
     * @param evt -> evento del cierre de ventana
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        fachada.logInfoExterna("Cierre de sesión de administrador con DNI " + this.admin.getDni());
    }//GEN-LAST:event_formWindowClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAtras;
    private javax.swing.JButton bDevolver;
    private javax.swing.JLabel lAlta;
    private javax.swing.JLabel lUsuario2;
    private javax.swing.JTextField tfIdPortatil;
    // End of variables declaration//GEN-END:variables
}
